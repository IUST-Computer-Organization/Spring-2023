$date
	Thu May 25 23:25:06 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Booth_Mult_tb $end
$var wire 16 ! Result [15:0] $end
$var parameter 32 " Testcase_Numbers $end
$var parameter 32 # WIDTH $end
$var reg 8 $ A [7:0] $end
$var reg 8 % B [7:0] $end
$scope module uut $end
$var wire 8 & input_A [7:0] $end
$var wire 8 ' input_B [7:0] $end
$var wire 16 ( C [15:0] $end
$var wire 9 ) B [7:-1] $end
$var wire 9 * A [7:-1] $end
$var parameter 32 + WIDTH $end
$scope begin genblk1[0] $end
$var parameter 2 , i $end
$scope begin genblk1[0] $end
$var parameter 2 - j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 . j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 / j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 0 j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 1 j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 2 j $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 3 j $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 4 j $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 5 i $end
$scope begin genblk1[0] $end
$var parameter 2 6 j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 7 j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 8 j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 9 j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 : j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 ; j $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 < j $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 = j $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 > i $end
$scope begin genblk1[0] $end
$var parameter 2 ? j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 @ j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 A j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 B j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 C j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 D j $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 E j $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 F j $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 G i $end
$scope begin genblk1[0] $end
$var parameter 2 H j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 I j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 J j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 K j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 L j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 M j $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 N j $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 O j $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 P i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 O
b110 N
b101 M
b100 L
b11 K
b10 J
b1 I
b0 H
b11 G
b111 F
b110 E
b101 D
b100 C
b11 B
b10 A
b1 @
b0 ?
b10 >
b111 =
b110 <
b101 ;
b100 :
b11 9
b10 8
b1 7
b0 6
b1 5
b111 4
b110 3
b101 2
b100 1
b11 0
b10 /
b1 .
b0 -
b0 ,
b1000 +
b1000 #
b1010 "
$end
#0
$dumpvars
b0 P
bx0 *
bx0 )
bx (
bx '
bx &
bx %
bx $
bx !
$end
#1
b1110111000100100 !
b1110111000100100 (
b1 P
b100000010 )
b10000001 %
b10000001 '
b1001000 *
b100100 $
b100100 &
#2
b1101111011 !
b1101111011 (
b10 P
b11000110 )
b1100011 %
b1100011 '
b10010 *
b1001 $
b1001 &
#3
b1111101000101001 !
b1111101000101001 (
b11 P
b100011010 )
b10001101 %
b10001101 '
b11010 *
b1101 $
b1101 &
#4
b100000011001 !
b100000011001 (
b100 P
b100100 )
b10010 %
b10010 '
b11001010 *
b1100101 $
b1100101 &
#5
b1101 !
b1101 (
b101 P
b11010 )
b1101 %
b1101 '
b10 *
b1 $
b1 &
#6
b1110000011110 !
b1110000011110 (
b110 P
b1111010 )
b111101 %
b111101 '
b11101100 *
b1110110 $
b1110110 &
#7
b100001101000 !
b100001101000 (
b111 P
b100011000 )
b10001100 %
b10001100 '
b111011010 *
b11101101 $
b11101101 &
#8
b101011001 !
b101011001 (
b1000 P
b110001100 )
b11000110 %
b11000110 '
b111110010 *
b11111001 $
b11111001 &
#9
b1001101111101 !
b1001101111101 (
b1001 P
b101010100 )
b10101010 %
b10101010 '
b110001010 *
b11000101 $
b11000101 &
#10
b1111001110100110 !
b1111001110100110 (
b1010 P
b11101110 )
b1110111 %
b1110111 '
b111001010 *
b11100101 $
b11100101 &
#20
